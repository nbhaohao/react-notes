{"version":3,"sources":["pages/Refs/str.js"],"names":["__webpack_require__","r","__webpack_exports__","d","markdownText","code1","code2","code3"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,iCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,0BAAAG,IAAAL,EAAAG,EAAAD,EAAA,0BAAAI,IAAAN,EAAAG,EAAAD,EAAA,0BAAAK,IAAO,IAAMH,EAAY,qgBAMZC,EAAK,qsBAiCLC,EAAK,quBAqCLC,EAAK","file":"static/js/12.2956fb45.chunk.js","sourcesContent":["export const markdownText = `\nRefs 转发演示了父组件如何拿到子组件中的 DOM 节点实例，或者是组件实例，具体用到的 API 是 \\`React.forwardRef\\`.\n\n\\`React.createRef\\` 有点像一个高阶函数，它提供的 \\`ref\\` 参数允许被包裹的组件将 \\`ref\\` 指向任何想要指向的组件。 \n`\n\nexport const code1 = `\nconst BaseInput = React.forwardRef((props, ref) => {\n  return (\n    <div>\n      <input ref={ref} />\n    </div>\n  );\n});\n\nclass Parent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  handleFocusInput = () => {\n    this.inputRef.current.focus();\n  };\n\n  render() {\n    return (\n      <div>\n        我是一个 Parent 组件，我希望拿到子组件中的 ref\n        <button onClick={this.handleFocusInput}>\n          调用子组件中的 input.focus\n        </button>\n        <BaseInput ref={this.inputRef} />\n      </div>\n    );\n  }\n}\n`\n\nexport const code2 = `\nclass BaseAlert extends PureComponent {\n  showAlert() {\n    const { message } = this.props;\n    alert(\\`base alert \\${message}\\`);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nconst BaseAlertRefWrapper = React.forwardRef((props, ref) => {\n  return <BaseAlert ref={ref} {...props} />;\n});\n\nclass Parent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.alertRef = React.createRef();\n  }\n\n  handleAlert = () => {\n    this.alertRef.current.showAlert();\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleAlert}>调用BaseAlert 的 alert</button>\n        <BaseAlertRefWrapper ref={this.alertRef} message=\"hello everyone\" />\n      </div>\n    );\n  }\n}\n`\n\nexport const code3 = `\nclass BaseClassInput extends PureComponent {\n  render() {\n    const { innerRef } = this.props;\n    return (\n      <div>\n        <input ref={innerRef} />\n      </div>\n    );\n  }\n}\n\nconst BaseClassInputRefWrapper = React.forwardRef((props, ref) => {\n  return <BaseClassInput {...props} innerRef={ref} />;\n});\n\n\n\nconstructor(props) {\n    super(props);\n    this.innerInputRef = React.createRef();\n  }\n\n  handleClassInnerInputFocus = () => {\n    this.innerInputRef.current.focus();\n  };\n\n\n<div>\n  <button onClick={this.handleClassInnerInputFocus}>\n    调用 Class 组件内部的 DOM 元素\n  </button>\n  <BaseClassInputRefWrapper ref={this.innerInputRef} />\n</div> \n`"],"sourceRoot":""}