{"version":3,"sources":["pages/CodeScript/str.js"],"names":["__webpack_require__","r","__webpack_exports__","d","markdownText","code1","code2","code3","code4"],"mappings":"yFAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,iCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,0BAAAG,IAAAL,EAAAG,EAAAD,EAAA,0BAAAI,IAAAN,EAAAG,EAAAD,EAAA,0BAAAK,IAAAP,EAAAG,EAAAD,EAAA,0BAAAM,IAAO,IAAMJ,EAAY,koDAgBZC,EAAK,mOAeLC,EAAK,8XAoBLC,EAAK,6eAoBLC,EAAK","file":"static/js/8.5bac5a94.chunk.js","sourcesContent":["export const markdownText = `\n  代码分割是 \\`webpack\\` 所提供了一种能力，可以让模块生成独立的 JS 文件，\n  主要是为了减小 \\`bundle.js\\` 的体积，所以各个框架都有提供组件动态加载的写法。\n  \n  在 React 中，我们可以使用 \\`React.lazy\\` 来动态加载一个组件，比如我们下面有一个组件，它会在页面加载的 2 秒之后再加载进来。\n  \n  不过 React.lazy 似乎一定要搭配 \\`Suspense\\`, 不然 React 会报错。\n  \n  \\`Suspense\\` 中可以放多个异步组件，是等所有异步组件都加载完成了，\\`fallback\\` 才会消失。\n  **另外我们引入的是同一个组件，也就是说是同一份 js, 所以我们并不会重复请求。**\n  \n  路由功能是非常值得做代码分割的。这个 Demos 里刚好有 \\`react-router-dom\\` 库，所以你在切换路由的时候，可以看到短暂的 Loading.\n  \n  **要注意：React.lazy 只支持 default 导出。**\n`;\n\nexport const code1 = `\nconst Test = lazy(\n  () =>\n    new Promise(resolve => {\n      setTimeout(() => {\n        resolve(import(\"./Test\"));\n      }, 2000);\n    })\n);\n\n<Suspense fallback={<div>Loading...</div>}>\n  <Test />\n</Suspense>\n`;\n\nexport const code2 = `\nconst lazyExample = time =>\n  lazy(\n    () =>\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve(import(\"./Test\"));\n        }, time);\n      })\n  );\n\nconst Test = lazyExample(2000);\n\nconst TestFour = lazyExample(4000);\n<Suspense fallback={<div>加载 2 个异步组件</div>}>\n  <Test />\n  <TestFour />\n</Suspense>\n`;\n\nexport const code3 = `\nconst routesConfig = [\n  {\n    path: \"/codeScript/\",\n    name: \"代码分割\",\n    component: lazy(() => import(\"./pages/CodeScript\"))\n  },\n  {\n    path: \"/context/\",\n    name: \"Context\",\n    component: lazy(() => import(\"./pages/Context\"))\n  }\n];\n<Suspense fallback={<div>加载路由中~~~~~~~...</div>}>\n  {routesConfig.map(({ path, component }) => {\n    return <Route key={path} path={path} exact component={component} />\n  })}\n</Suspense>\n`;\n\nexport const code4 = `\nconst lazyExample = (time, path) =>\n  lazy(\n    () =>\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve(import(\\`\\${path}\\`));\n        }, time);\n      })\n  );\n\nconst Modal = lazyExample(2000, \"./Modal\");\n\n// showModal 默认是 false\n\n <div>\n  <button\n    onClick={() =>\n      this.setState(prevState => ({ showModal: !prevState.showModal }))\n    }\n  >\n    点击加载组件，可以看到 network 的请求\n  </button>\n  <Suspense fallback={<div>loading</div>}>\n    {showModal && <Modal />}\n  </Suspense>\n</div>\n`;\n"],"sourceRoot":""}