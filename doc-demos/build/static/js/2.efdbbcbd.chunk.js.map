{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js","pages/Context/index.js","pages/Context/str.js","components/MarkdownViewer.js","components/Block.js","components/CodeViewer.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","ThemeContext","React","createContext","Button","react_default","a","createElement","style","color","this","context","PureComponent","contextType","Header","Context_Button","HeaderFunctional","_ref","theme","HeaderCanChangeContext","_ref2","changeTheme","onClick","Context","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeThemeContext","themeContext","state","setState","MarkdownViewer","text","mdText","Provider","Block","Context_Header","CodeViewer","codeString","code1","Consumer","Context_HeaderFunctional","code2","code3","Context_HeaderCanChangeContext","__webpack_require__","r","__webpack_exports__","d","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_markdown__WEBPACK_IMPORTED_MODULE_1__","react_markdown__WEBPACK_IMPORTED_MODULE_1___default","children","border","padding","marginBottom","react_syntax_highlighter_dist_esm_prism_light__WEBPACK_IMPORTED_MODULE_1__","react_syntax_highlighter_dist_esm_styles_prism__WEBPACK_IMPORTED_MODULE_2__","react_syntax_highlighter_dist_esm_languages_prism_jsx__WEBPACK_IMPORTED_MODULE_3__","PrismLight","registerLanguage","jsx","language","darcula"],"mappings":"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","file":"static/js/2.efdbbcbd.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import React, { PureComponent } from \"react\";\nimport { MarkdownViewer } from \"../../components/MarkdownViewer\";\nimport { Block } from \"../../components/Block\";\nimport { CodeViewer } from \"../../components/CodeViewer\";\nimport { mdText, code1, code2, code3 } from \"./str\";\n\nconst ThemeContext = React.createContext(\"tomato\");\n\nclass Button extends PureComponent {\n  static contextType = ThemeContext;\n\n  render() {\n    return (\n      <button style={{ color: this.context.color }}>\n        我通过 context 拿到了 theme 值\n      </button>\n    );\n  }\n}\n\nconst Header = () => (\n  <div>\n    我并不需要将 theme 属性传递给 Button 组件，它自己就可以拿到\n    <Button />\n  </div>\n);\n\nconst HeaderFunctional = ({ theme }) => {\n  return (\n    <div style={{ color: theme }}>\n      我虽然是函数式组件，但我仍然拿到了{theme}\n    </div>\n  );\n};\n\nconst HeaderCanChangeContext = ({ theme, changeTheme }) => {\n  return (\n    <div style={{ color: theme }}>\n      我虽然是函数式组件，但我仍然拿到了{theme}，而且我还可以修改 theme.\n      <button onClick={changeTheme}>change</button>\n    </div>\n  );\n};\n\nclass Context extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      themeContext: {\n        color: \"blue\",\n        changeTheme: this.handleChangeThemeContext\n      }\n    };\n  }\n\n  handleChangeThemeContext = () => {\n    const { themeContext } = this.state;\n    this.setState({\n      themeContext: {\n        ...themeContext,\n        color: themeContext.color === \"blue\" ? \"red\" : \"blue\"\n      }\n    });\n  };\n\n  render() {\n    const { themeContext } = this.state;\n    return (\n      <div>\n        <MarkdownViewer text={mdText} />\n        <ThemeContext.Provider value={themeContext}>\n          <Block>\n            <p>\n              普通的 Class 组件要使用 Context 的话，需要使用利用 contextType\n              来指定使用哪一个 Context\n            </p>\n            <Header />\n            <CodeViewer codeString={code1} />\n          </Block>\n          <Block>\n            <p>如果想在函数式组件中使用，则需要借助 MyContext.Consumer</p>\n            <ThemeContext.Consumer>\n              {value => <HeaderFunctional theme={value.color} />}\n            </ThemeContext.Consumer>\n            <CodeViewer codeString={code2} />\n          </Block>\n          <Block>\n            <p>\n              我们的 Context\n              当然可以支持修改，且使用到的组件会自动渲染，如果要动态修改一个\n              Context, 我们需要把它作为 state.\n            </p>\n            <button onClick={this.handleChangeThemeContext}>\n              修改 context 的值。\n            </button>\n            <ThemeContext.Consumer>\n              {value => <HeaderFunctional theme={value.color} />}\n            </ThemeContext.Consumer>\n            <CodeViewer codeString={code3} />\n          </Block>\n          <Block>\n            <p>\n              文档还提供了，如果子组件需要修改 context\n              的值的话，可以让父组件把函数也作为 Context 的一部分传递下去。\n            </p>\n            <ThemeContext.Consumer>\n              {value => (\n                <HeaderCanChangeContext\n                  theme={value.color}\n                  changeTheme={value.changeTheme}\n                />\n              )}\n            </ThemeContext.Consumer>\n          </Block>\n        </ThemeContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport { Context as default };\n","export const mdText = `\nContext 我们平常可能比较少用，但假如我们有用 \\`react-redux\\` 库的话，我们其实就已经利用了 Context 这个特性了。\n\n\\`Provider\\` 接收一个 \\`store\\` 作为参数，然后它通过 Context 传递，之后 \\`connect\\` 这个高阶组件里就可以获取到 \\`store\\` 的值了。\n\n`\n\nexport const code1 = `\n// 'tomato' 是我们的默认值\n// 我们可以使用 ThemeContext.Provider 来覆盖它\nconst ThemeContext = React.createContext(\"tomato\");\n\nclass Button extends PureComponent {\n  static contextType = ThemeContext;\n\n  render() {\n    return (\n      <button style={{ color: this.context }}>\n        我通过 context 拿到了 theme 值\n      </button>\n    );\n  }\n}\n\nconst Header = () => (\n  <div>\n    我并不需要将 theme 属性传递给 Button 组件，它自己就可以拿到\n    <Button />\n  </div>\n);\n\nconst Context = () => (\n  <div>\n    <ThemeContext.Provider value=\"blue\">\n      <Header />\n    </ThemeContext.Provider>\n  </div>\n)\n\n`\n\nexport const code2 = `\n// 外层已经声明了 ThemeContext.Provider\n// Consumer 中只能包含函数，且只能包含一个组件，\n\nconst HeaderFunctional = ({ theme }) => {\n  return (\n    <div style={{ color: theme }}>\n      我虽然是函数式组件，但我仍然拿到了{theme}\n    </div>\n  );\n};\n\n <ThemeContext.Consumer>\n  {value => <HeaderFunctional theme={value} />}\n </ThemeContext.Consumer>\n`\n\nexport const code3 = `\n  constructor(props) {\n    super(props);\n    this.state = {\n      themeContext: \"blue\"\n    };\n  }\n  \n  handleChangeThemeContext = () => {\n    const { themeContext } = this.state;\n    this.setState({\n      themeContext: themeContext === \"blue\" ? \"red\" : \"blue\"\n    });\n  };\n\n  \n  <ThemeContext.Provider value={themeContext}>\n    {'....'}\n    <button onClick={this.handleChangeThemeContext}>\n      修改 context 的值。\n    </button>\n  </ThemeContext.Provider>\n\n`\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport const MarkdownViewer = ({ text }) => <ReactMarkdown source={text} />;\n","import React from \"react\";\n\nexport const Block = ({ children }) => {\n  return (\n    <div\n      style={{\n        border: \"1px solid black\",\n        padding: \"32px\",\n        marginBottom: \"20px\"\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\nimport PrismLight from \"react-syntax-highlighter/dist/esm/prism-light\";\nimport { darcula } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport jsx from \"react-syntax-highlighter/dist/esm/languages/prism/jsx\";\nPrismLight.registerLanguage(\"jsx\", jsx);\n\nexport const CodeViewer = ({ codeString }) => {\n  return (\n    <PrismLight language=\"jsx\" style={darcula}>\n      {codeString}\n    </PrismLight>\n  );\n};\n"],"sourceRoot":""}