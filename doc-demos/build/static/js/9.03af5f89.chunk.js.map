{"version":3,"sources":["pages/Context/str.js"],"names":["__webpack_require__","r","__webpack_exports__","d","mdText","code1","code2","code3"],"mappings":"yFAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,2BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,0BAAAG,IAAAL,EAAAG,EAAAD,EAAA,0BAAAI,IAAAN,EAAAG,EAAAD,EAAA,0BAAAK,IAAO,IAAMH,EAAM,0hBAONC,EAAK,ozBAkCLC,EAAK,ohBAiBLC,EAAK","file":"static/js/9.03af5f89.chunk.js","sourcesContent":["export const mdText = `\nContext 我们平常可能比较少用，但假如我们有用 \\`react-redux\\` 库的话，我们其实就已经利用了 Context 这个特性了。\n\n\\`Provider\\` 接收一个 \\`store\\` 作为参数，然后它通过 Context 传递，之后 \\`connect\\` 这个高阶组件里就可以获取到 \\`store\\` 的值了。\n\n`\n\nexport const code1 = `\n// 'tomato' 是我们的默认值\n// 我们可以使用 ThemeContext.Provider 来覆盖它\nconst ThemeContext = React.createContext(\"tomato\");\n\nclass Button extends PureComponent {\n  static contextType = ThemeContext;\n\n  render() {\n    return (\n      <button style={{ color: this.context }}>\n        我通过 context 拿到了 theme 值\n      </button>\n    );\n  }\n}\n\nconst Header = () => (\n  <div>\n    我并不需要将 theme 属性传递给 Button 组件，它自己就可以拿到\n    <Button />\n  </div>\n);\n\nconst Context = () => (\n  <div>\n    <ThemeContext.Provider value=\"blue\">\n      <Header />\n    </ThemeContext.Provider>\n  </div>\n)\n\n`\n\nexport const code2 = `\n// 外层已经声明了 ThemeContext.Provider\n// Consumer 中只能包含函数，且只能包含一个组件，\n\nconst HeaderFunctional = ({ theme }) => {\n  return (\n    <div style={{ color: theme }}>\n      我虽然是函数式组件，但我仍然拿到了{theme}\n    </div>\n  );\n};\n\n <ThemeContext.Consumer>\n  {value => <HeaderFunctional theme={value} />}\n </ThemeContext.Consumer>\n`\n\nexport const code3 = `\n  constructor(props) {\n    super(props);\n    this.state = {\n      themeContext: \"blue\"\n    };\n  }\n  \n  handleChangeThemeContext = () => {\n    const { themeContext } = this.state;\n    this.setState({\n      themeContext: themeContext === \"blue\" ? \"red\" : \"blue\"\n    });\n  };\n\n  \n  <ThemeContext.Provider value={themeContext}>\n    {'....'}\n    <button onClick={this.handleChangeThemeContext}>\n      修改 context 的值。\n    </button>\n  </ThemeContext.Provider>\n\n`\n"],"sourceRoot":""}